{
    "Introduction": {
        "Conformance": [
            "Conforming processors MUST produce errors when non-conforming documents are consumed."
        ]
    },
    "Data Model": {
        "Proofs": [
            "When expressing a data integrity proof on an object, a proof property MUST be used.",
            "$.proof: If present, its value MUST be either a single object, or an unordered set of objects",
            "$.proof.id: An optional identifier for the proof, which MUST be a URL [URL], such as a UUID as a URN",
            "$.proof.type: The specific type of proof MUST be specified as a string that maps to a URL [URL].",
            "$.proof.proofPurpose: The reason the proof was created MUST be specified as a string that maps to a URL [URL].",
            "$.proof.verificationMethod: If included, the value MUST be a string that maps to a [URL].",
            "$.proof.cryptosuite: If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
            "$.proof.cryptosuite: If specified, its value MUST be a string.",
            "$.proof.created: If included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string.",
            "$.proof.expires: If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string.",
            "$.proof.domain: If specified, the associated value MUST be either a string, or an unordered set of strings.",
            "$.proof.proofValue: The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
            "$.proof.previousProof: Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
            "$.proof.previousProof: If an unordered list, all referenced proofs in the array MUST verify."
        ],
        "Ressource Integrity": [
            "If present, the digestMultibase value MUST be a single string value, or an list of string values, each of which is a Multibase-encoded Multihash value."
        ],
        "Contexts and Vocabularies": [
            "Implementations that perform JSON-LD processing MUST treat the following JSON-LD context URLs as already resolved, where the resolved document matches the corresponding hash values.",
            "Implementations that perform RDF processing MUST treat the JSON-LD serialization of the vocabulary URL as already dereferenced, where the dereferenced document matches the corresponding hash value."
        ],
        "Validating Contexts": [
            "Applications MUST use the algorithm in Section 4.6 Context Validation, or one that achieves equivalent protections, to validate contexts in a conforming secured document.",
            "Context validation MUST be run after running the applicable algorithm in either Section 4.4 Verify Proof or Section 4.5 Verify Proof Sets and Chains."
        ],
        "Context Injection": [
            "If an @context declaration is not included, extensions (such as the addition of new properties) related to this specification or corresponding cryptosuites MUST NOT be made."
        ],
        "Securing Data Losslessly": [
            "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error when data is dropped by a JSON-LD processor.",
            "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
        ],
        "Cryptographic Suites": [
            "The specification MUST be published as a human-readable document at a URL.",
            "The specification MUST identify a cryptographic suite type and any parameters that can be used with the suite.",
            "The specification MUST detail the transformation algorithms (if any), parameters, and other necessary details, used to modify input data into the data to be protected.",
            "The specification MUST detail the hashing algorithms parameters, and other necessary details used to perform cryptographic hashing to the data to be protected.",
            "The specification MUST detail the proof serialization algorithms, parameters, and other necessary details used to perform cryptographic protection of the data.",
            "The specification MUST detail the proof verification algorithms, parameters, and other necessary details used to perform cryptographic verification of the data.",
            "The specification MUST define a data integrity cryptographic suite instantiation algorithm that accepts a set of options (map options) and returns a cryptosuite instance (struct cryptosuite).",
            "The specification MUST detail any known resource starvation attack that can occur in an algorithm and provide testable mitigations against each attack.",
            "The specification MUST contain a Security Considerations section detailing security considerations specific to the cryptographic suite.",
            "The specification MUST contain a Privacy Considerations section detailing privacy considerations specific to the cryptographic suite.",
            "The JSON-LD context associated with the cryptographic suite MUST have its terms protected from unsafe redefinition, by use of the @protected keyword."
        ],
        "Data Integrity Proof": [
            "$.type: The type property MUST contain the string DataIntegrityProof.",
            "$.cryptosuite: The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
            "$.cryptosuite: If the processing environment supports string subtypes, the subtype of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype.",
            "$.proofValue: The proofValue property MUST be used, as specified in Section 2.1 Proofs.",
            "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
        ],
        "Algorithms": [
            "Add Proof: Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
            "Add Proof: If the algorithm produces an error, the error MUST be propagated.",
            "Add Proof: If one or more of the proof.type, proof.verificationMethod, and proof.proofPurpose values is not set, an error MUST be raised.",
            "Add Proof: If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised.",
            "Add Proof: If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised.",
            "Add Proof Set/Chain:Whenever this algorithm encodes strings, it MUST use UTF-8 encoding. ",
            "Add Proof Set/Chain: If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised.",
            "Add Proof Set/Chain: If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised",
            "Verify Proof: When a step says an error MUST be raised, it means that a verification result MUST be returned with a verified value of false and a non-empty errors list.",
            "Verify Proof: If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised",
            "Verify Proof: If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised",
            "Verify Proof: If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised",
            "Verify Proof: If domain was given, and it does not contain the same strings as proof.domain (treating a single string as a set containing just that string), an error MUST be raised",
            "Verify Proof: If challenge was given, and it does not match proof.challenge, an error MUST be raised",
            "Verify Proof Sets/Chains: If a proof with id does not exist in allProofs, an error MUST be raised",
            "Verify Proof Sets/Chains: If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised"
        ],
        "Processing Errors": [
            "The type value of the error object MUST be a URL that starts with the value https://w3id.org/security# and ends with the value in the section listed below.",
            "The code value MUST be the integer code described in the table below."
        ],
        "Verification Methode Binding": [
            "Implementers must ensure that a verification method is bound to a particular controller by going from the verification method to the controller document, and then ensuring that the controller document also contains the verification method."
        ]
    }
}